### YamlMime:ManagedReference
items:
- uid: Interlex.Crawler.Manager.HttpCrawlerManager
  commentId: T:Interlex.Crawler.Manager.HttpCrawlerManager
  id: HttpCrawlerManager
  parent: Interlex.Crawler.Manager
  children:
  - Interlex.Crawler.Manager.HttpCrawlerManager.#ctor(ILog,Interlex.Crawler.Model.CrawlerHttpManagerConfig)
  - Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(Interlex.Crawler.Crawlers.BaseHttpCrawler)
  - Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(System.Collections.Generic.IReadOnlyCollection{Interlex.Crawler.Crawlers.BaseHttpCrawler})
  langs:
  - csharp
  - vb
  name: HttpCrawlerManager
  nameWithType: HttpCrawlerManager
  fullName: Interlex.Crawler.Manager.HttpCrawlerManager
  type: Class
  source:
    id: HttpCrawlerManager
    path: ''
    startLine: 2965
  assemblies:
  - cs.temp.dll
  namespace: Interlex.Crawler.Manager
  summary: "\nRepresents manager for the <xref href=\"Interlex.Crawler.Crawlers.BaseHttpCrawler\" data-throw-if-not-resolved=\"false\"></xref> crawlers\n"
  example: []
  syntax:
    content: public class HttpCrawlerManager
    content.vb: Public Class HttpCrawlerManager
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Interlex.Crawler.Manager.HttpCrawlerManager.#ctor(ILog,Interlex.Crawler.Model.CrawlerHttpManagerConfig)
  commentId: M:Interlex.Crawler.Manager.HttpCrawlerManager.#ctor(ILog,Interlex.Crawler.Model.CrawlerHttpManagerConfig)
  id: '#ctor(ILog,Interlex.Crawler.Model.CrawlerHttpManagerConfig)'
  parent: Interlex.Crawler.Manager.HttpCrawlerManager
  langs:
  - csharp
  - vb
  name: HttpCrawlerManager(ILog, CrawlerHttpManagerConfig)
  nameWithType: HttpCrawlerManager.HttpCrawlerManager(ILog, CrawlerHttpManagerConfig)
  fullName: Interlex.Crawler.Manager.HttpCrawlerManager.HttpCrawlerManager(ILog, Interlex.Crawler.Model.CrawlerHttpManagerConfig)
  type: Constructor
  source:
    id: .ctor
    path: ''
    startLine: 2977
  assemblies:
  - cs.temp.dll
  namespace: Interlex.Crawler.Manager
  summary: "\nCreates new instance\n"
  example: []
  syntax:
    content: public HttpCrawlerManager(ILog logger, CrawlerHttpManagerConfig config)
    parameters:
    - id: logger
      type: ILog
      description: Logger
    - id: config
      type: Interlex.Crawler.Model.CrawlerHttpManagerConfig
      description: Confg
    content.vb: Public Sub New(logger As ILog, config As CrawlerHttpManagerConfig)
  overload: Interlex.Crawler.Manager.HttpCrawlerManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(System.Collections.Generic.IReadOnlyCollection{Interlex.Crawler.Crawlers.BaseHttpCrawler})
  commentId: M:Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(System.Collections.Generic.IReadOnlyCollection{Interlex.Crawler.Crawlers.BaseHttpCrawler})
  id: StartAsync(System.Collections.Generic.IReadOnlyCollection{Interlex.Crawler.Crawlers.BaseHttpCrawler})
  parent: Interlex.Crawler.Manager.HttpCrawlerManager
  langs:
  - csharp
  - vb
  name: StartAsync(IReadOnlyCollection<BaseHttpCrawler>)
  nameWithType: HttpCrawlerManager.StartAsync(IReadOnlyCollection<BaseHttpCrawler>)
  fullName: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(System.Collections.Generic.IReadOnlyCollection<Interlex.Crawler.Crawlers.BaseHttpCrawler>)
  type: Method
  source:
    id: StartAsync
    path: ''
    startLine: 2989
  assemblies:
  - cs.temp.dll
  namespace: Interlex.Crawler.Manager
  summary: "\nStarts the crawling, creating and persisting of the packages to the database\n"
  example: []
  syntax:
    content: public Task StartAsync(IReadOnlyCollection<BaseHttpCrawler> crawlers)
    parameters:
    - id: crawlers
      type: System.Collections.Generic.IReadOnlyCollection{Interlex.Crawler.Crawlers.BaseHttpCrawler}
      description: Crawlers to start
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function StartAsync(crawlers As IReadOnlyCollection(Of BaseHttpCrawler)) As Task
  overload: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync*
  nameWithType.vb: HttpCrawlerManager.StartAsync(IReadOnlyCollection(Of BaseHttpCrawler))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(System.Collections.Generic.IReadOnlyCollection(Of Interlex.Crawler.Crawlers.BaseHttpCrawler))
  name.vb: StartAsync(IReadOnlyCollection(Of BaseHttpCrawler))
- uid: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(Interlex.Crawler.Crawlers.BaseHttpCrawler)
  commentId: M:Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(Interlex.Crawler.Crawlers.BaseHttpCrawler)
  id: StartAsync(Interlex.Crawler.Crawlers.BaseHttpCrawler)
  parent: Interlex.Crawler.Manager.HttpCrawlerManager
  langs:
  - csharp
  - vb
  name: StartAsync(BaseHttpCrawler)
  nameWithType: HttpCrawlerManager.StartAsync(BaseHttpCrawler)
  fullName: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync(Interlex.Crawler.Crawlers.BaseHttpCrawler)
  type: Method
  source:
    id: StartAsync
    path: ''
    startLine: 3003
  assemblies:
  - cs.temp.dll
  namespace: Interlex.Crawler.Manager
  summary: "\nStarts the crawling, creating and persisting of the packages to the database\n"
  example: []
  syntax:
    content: public Task StartAsync(BaseHttpCrawler crawler)
    parameters:
    - id: crawler
      type: Interlex.Crawler.Crawlers.BaseHttpCrawler
      description: Crawler to start
    return:
      type: System.Threading.Tasks.Task
      description: ''
    content.vb: Public Function StartAsync(crawler As BaseHttpCrawler) As Task
  overload: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Interlex.Crawler.Crawlers.BaseHttpCrawler
  commentId: T:Interlex.Crawler.Crawlers.BaseHttpCrawler
  parent: Interlex.Crawler.Crawlers
  name: BaseHttpCrawler
  nameWithType: BaseHttpCrawler
  fullName: Interlex.Crawler.Crawlers.BaseHttpCrawler
- uid: Interlex.Crawler.Manager
  commentId: N:Interlex.Crawler.Manager
  name: Interlex.Crawler.Manager
  nameWithType: Interlex.Crawler.Manager
  fullName: Interlex.Crawler.Manager
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Interlex.Crawler.Crawlers
  commentId: N:Interlex.Crawler.Crawlers
  name: Interlex.Crawler.Crawlers
  nameWithType: Interlex.Crawler.Crawlers
  fullName: Interlex.Crawler.Crawlers
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Interlex.Crawler.Manager.HttpCrawlerManager.#ctor*
  commentId: Overload:Interlex.Crawler.Manager.HttpCrawlerManager.#ctor
  name: HttpCrawlerManager
  nameWithType: HttpCrawlerManager.HttpCrawlerManager
  fullName: Interlex.Crawler.Manager.HttpCrawlerManager.HttpCrawlerManager
- uid: ILog
  isExternal: true
  name: ILog
  nameWithType: ILog
  fullName: ILog
- uid: Interlex.Crawler.Model.CrawlerHttpManagerConfig
  commentId: T:Interlex.Crawler.Model.CrawlerHttpManagerConfig
  parent: Interlex.Crawler.Model
  name: CrawlerHttpManagerConfig
  nameWithType: CrawlerHttpManagerConfig
  fullName: Interlex.Crawler.Model.CrawlerHttpManagerConfig
- uid: Interlex.Crawler.Model
  commentId: N:Interlex.Crawler.Model
  name: Interlex.Crawler.Model
  nameWithType: Interlex.Crawler.Model
  fullName: Interlex.Crawler.Model
- uid: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync*
  commentId: Overload:Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync
  name: StartAsync
  nameWithType: HttpCrawlerManager.StartAsync
  fullName: Interlex.Crawler.Manager.HttpCrawlerManager.StartAsync
- uid: System.Collections.Generic.IReadOnlyCollection{Interlex.Crawler.Crawlers.BaseHttpCrawler}
  commentId: T:System.Collections.Generic.IReadOnlyCollection{Interlex.Crawler.Crawlers.BaseHttpCrawler}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<BaseHttpCrawler>
  nameWithType: IReadOnlyCollection<BaseHttpCrawler>
  fullName: System.Collections.Generic.IReadOnlyCollection<Interlex.Crawler.Crawlers.BaseHttpCrawler>
  nameWithType.vb: IReadOnlyCollection(Of BaseHttpCrawler)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of Interlex.Crawler.Crawlers.BaseHttpCrawler)
  name.vb: IReadOnlyCollection(Of BaseHttpCrawler)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Interlex.Crawler.Crawlers.BaseHttpCrawler
    name: BaseHttpCrawler
    nameWithType: BaseHttpCrawler
    fullName: Interlex.Crawler.Crawlers.BaseHttpCrawler
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Interlex.Crawler.Crawlers.BaseHttpCrawler
    name: BaseHttpCrawler
    nameWithType: BaseHttpCrawler
    fullName: Interlex.Crawler.Crawlers.BaseHttpCrawler
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Collections.Generic.IReadOnlyCollection`1
  commentId: T:System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: IReadOnlyCollection<T>
  nameWithType: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  nameWithType.vb: IReadOnlyCollection(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    nameWithType: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
